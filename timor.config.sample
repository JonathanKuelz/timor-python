# Using a custom configuration file like this one, you can set filepaths for various timor functionalities.
# This is a yaml file, for details on how it is parsed, see timor.utilities.configuration
# To check which configuration file is loaded for Timor, you can run the following command in your terminal:
# python -c "from timor.utilities import configurations; print(configurations.CONFIG_FILE)"

# You can specify multiple options that declare how you want to perform logging.
# All arguments declared here will be passed to timor.utilities.logging.basicConfig
[LOGGING]
filemode = a  # Append. This can also be 'w' to overwrite previous logs
level = INFO
filename = /tmp/timor.log  # If you do not provide a filename, stdout will be the logging destination


# Timor works with files of robots, schemata, and more. Here, you can declare where to look for them
# Declare "robots" to tell timor where your module libraries are stored (if you do so, you have to explicitly include the sample robots provided with Timor to use them)
# Declare "test_data" to use an alternative directory for unittest data, e.g. for debugging
# Declare a "schema_dir" to define where timor stores schemata to validate JSON files for tasks, modules, and more
[FILE_LOCATIONS]
robots = ["/home/<username>/timor-python/src/timor_sample_robots", "/home/<username>/my_robots"]

# Tasks and Module DBs often reference external 3D data files. Here you can specify how such references should be
# handled when saving a task or module DB to file. The current options are "error", "warning", "ignore", "copy",
# and "symlink".
[SERIALIZING]
task_assets_copy_behavior = "error"
db_assets_copy_behavior = "error"

# Settings for robot simulation
[COLLISION]
safety_margin = 0.01  # Safety margin in meters for collision checking

# Here, you can specify hyperparameters preferences for optimizers used in Timor.
[Optimizers]
save_solutions_dir = <path_to_folder>
[Optimizers.GA]
population_size = 15
num_generations = 200
mutation_probability = 0.2
