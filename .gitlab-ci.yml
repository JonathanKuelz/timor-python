image: ${CI_DEPENDENCY_PROXY_GROUP_IMAGE_PREFIX}/python:3.10

variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
  GIT_SUBMODULE_STRATEGY: recursive
  GIT_SUBMODULE_UPDATE_FLAGS: --remote
  GIT_CLONE_PATH: $CI_BUILDS_DIR/$CI_JOB_STAGE/$CONCURRENT_ID/$CI_PROJECT_NAME
  CONDA_ENV: timor

cache:
  paths:
    - .cache/pip
    - public  # Keep changes on gitlab pages; overwrite parts with artifacts from different jobs. ! protected branches
              # have own, separate cache by default

workflow:
  # Run the pipeline as branch pipeline when no merge request is open or as merge pipeline when a merge request is open, but not both
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    - if: '$CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS'
      when: never
    - if: '$CI_COMMIT_BRANCH'

before_script:
    - echo "Some debug information:"
    - echo "Running in $GIT_CLONE_PATH"
    # - echo "Complete env:"
    # - env

stages:
  - static_check
  - copy
  - build
  - unittest
  - report

docstring check:
  stage: static_check
  script:
    - pip install pydocstyle
    - cd src/timor && pydocstyle --config=../../.pydocstyle

flake8 linting:
  stage: static_check
  script:
    - python --version
    - pip --version
    - pip install flake8==5.0.4
    - flake8

notebook check:
  stage: static_check
  script:
    - pip install nb-clean
    - find tutorials/ -type f -name "*.ipynb" -exec nb-clean check {} +

pip_py_38:
  stage: build
  image: ${CI_DEPENDENCY_PROXY_GROUP_IMAGE_PREFIX}/python:3.8
  script:
    - pip install .[full]
    - python -m pytest -m "imports" tests/
  rules:
    - changes:
      - .gitlab-ci.yml
      - pyproject.toml
    - if: $CI_PIPELINE_SOURCE == "schedule"  # run atleast with nightly run to make sure no external stuff changed

pip_py_39:
  stage: build
  image: ${CI_DEPENDENCY_PROXY_GROUP_IMAGE_PREFIX}/python:3.9
  script:
    - pip install .[full]
    - python -m pytest -m "imports" tests/
  rules:
    - changes:
      - .gitlab-ci.yml
      - pyproject.toml
    - if: $CI_PIPELINE_SOURCE == "schedule"  # run atleast with nightly run to make sure no external stuff changed

pip_py_310:
  stage: build
  image: ${CI_DEPENDENCY_PROXY_GROUP_IMAGE_PREFIX}/python:3.10
  script:
    - pip install .[full]
    - python -m pytest -m "imports" tests/
  rules:
    - changes:
      - .gitlab-ci.yml
      - pyproject.toml
    - if: $CI_PIPELINE_SOURCE == "schedule"  # run atleast with nightly run to make sure no external stuff changed

pip_py_311:
  stage: build
  image: ${CI_DEPENDENCY_PROXY_GROUP_IMAGE_PREFIX}/python:3.11
  script:
    - pip install .[full]
    - python -m pytest -m "imports" tests/
  rules:
    - changes:
      - .gitlab-ci.yml
      - pyproject.toml
    - if: $CI_PIPELINE_SOURCE == "schedule"  # run atleast with nightly run to make sure no external stuff changed

unittests:
  stage: unittest
  script:
    - pip install -e .[dev]  # Such that *.so are located in src folder
    - cd src  # Now, "import timor" will import from src/timor, not from the pip install. Important for coverage
    - coverage run -p --rcfile=.coveragerc -m pytest -m "not imports and not full" ../tests
  artifacts:
    expose_as: 'coverage_base'
    when: always
    paths:
      - ci/coverage/

unittests full:
  stage: unittest
  script:
    - pip install .[full]  # Such that *.so are located in src folder
    - cd src  # Now, "import timor" will import from src/timor, not from the pip install. Important for coverage
    - coverage run -p --rcfile=.coveragerc -m pytest -m "not imports and full" ../tests
  artifacts:
    expose_as: 'coverage_base'
    when: always
    paths:
      - ci/coverage/
  allow_failure: true  # These only test optional features and is ok if they fail once in a while e.g. updated libraries

unittests imports:
  stage: unittest
  script:
    - pip install .[dev]  # Such that *.so are located in src folder
    - cd src  # Now, "import timor" will import from src/timor, not from the pip install. Important for coverage
    - coverage run -p --rcfile=.coveragerc -m pytest -m "imports" ../tests
  artifacts:
    expose_as: 'coverage_imports'
    when: always
    paths:
      - ci/coverage/

coverage:
  stage: report
  needs: [unittests, unittests imports]
  script:
    - pip install .[dev]
    - cd src
    - coverage combine --rcfile=.coveragerc
    - coverage report --rcfile=.coveragerc
  after_script:
    - pip install coverage
    - cd src
    - coverage html -i --rcfile=.coveragerc
    - coverage xml -i --rcfile=.coveragerc
  coverage: '/^TOTAL.+?(\d+.\d*\%)$/'
  artifacts:
    expose_as: 'coverage_report'
    when: always
    reports:
      coverage_report:
        coverage_format: cobertura
        path: ci/coverage/coverage.xml
    paths:
      - ci/coverage/
