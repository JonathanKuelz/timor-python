{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "$id": "https://www.crok.cps.in.tum.de/schemas/SolutionSchema.json",
  "title": "cRoK Solution",
  "description": "A solution to the cRoK benchmarking suite defining a robot, where it is and how it moves. Detailed documentation in crok.cps.in.tum.de/solution_description",
  "type": "object",
  "version": "2020b",
  "required": ["taskID", "version", "costFunction", "moduleSet", "moduleOrder", "basePose", 
               "cost", "date", "author", "email", "affiliation", "computationTime", "processorName", 
               "trajectory"],
  "properties": {
    "taskID": {
      "description": "Unique task ID (together with version) this solution was calculated for",
      "type": "number",
      "exclusiveMinimum": 0
    },
    "version": {
      "description": "Version specification for solution and accompanying task",
      "type": "string"
    },
    "costFunction": {
      "description": "String describing (compound) cost function",
      "type": "string"
    },
    "moduleSet": {
      "description": "String stating module set used",
      "type": "string",
      "enum": ["ModRob-v1", "ModRob-v2", "SchunkLWA4P", "Hebi", "KukaLWR4p", "StaeubliTx90", "Panda"]
    },
    "moduleOrder": {
      "description": "List of used module IDs. If a single kinematic chain with orientable modules is used these are assumed to be in order from the base to the end-effector.",
      "type": "array",
      "items": {
        "anyOf": [{"type": "string"}, {"type": "integer"}]
      },
      "minItems": 1,
      "uniqueItems": false
    },
    "moduleConnection": {
      "description": "Describes how the module instances listed in module order are connected. Each entry gives (moduleOrder_idx_i, connector_i, moduleOrder_idx_j, connector_j).",
      "type": "array",
      "items": {
        "type": "array",
        "minItems": 4,
        "maxItems": 4,
        "items": {
          "anyOf": [{"type": "string"}, {"type": "integer"}]
        }
      },
      "default": []
    },
    "baseConnection": {
      "description": "Describes how the module instances are connected to the the base poses. Each entry gives (moduleOrder_idx_i, connector_i, basePose_idx).",
      "type": "array",
      "items": {
        "type": "array",
        "minItems": 3,
        "maxItems": 3,
        "items": {
          "anyOf": [{"type": "string"}, {"type": "integer"}]
        }
      },
      "default": []
    },
    "basePose": {
      "description": "(List) of pose(s) of robot base(s)",
      "type": "array",
      "items": {
        "$ref": "https://www.crok.cps.in.tum.de/schemas/PoseSchema.json#/$defs/pose"
      },
      "minItems": 1
    },
    "cost": {
      "description": "Calculated cost of this solution according to cost function given.",
      "type": "number"
    },
    "date": {
        "description": "Date as string in form yyyy-MM-dd",
        "type": "string",
        "format": "date"
    },
    "author": {
      "description": "List of author names",
      "type": "array",
      "items": {
        "type":  "string"
      }
    },
    "email": {
      "description": "List of author E-Mail addresses; should be same length as author array.",
      "type": "array",
      "items": {
        "type":  "string",
        "format": "idn-email"
      }
    },
    "affiliation": {
      "description": "Affiliation of each author; should be same length as author array.",
      "type": "array",
      "items": {
        "type":  "string"
      }
    },
    "publication": {
      "description": "Reference to publication describing how this solution was producec, e.g., DOI",
      "type": "string",
      "default": ""
    },
    "computationTime": {
      "description": "Time in seconds to find this solution",
      "type": "number"
    },
    "processorName": {
      "description": "Processor used to calculate this solution for comparing run-times invariantly to used hardware",
      "type": "string"
    },
    "trajectory": {
      "description": "Specifies the path in generalized coordinates the robot should follow along",
      "type": "object",
      "properties": {
        "t": {
          "type": "array",
          "items": {
            "type": "number"
          }
        },
        "q": {
          "type": "array",
          "items": {
            "type": "array",
            "items": {
              "type": "number"
            }
          }
        },
        "dq": {
          "type": "array",
          "items": {
            "type": "array",
            "items": {
              "type": "number"
            }
          }
        },
        "ddq": {
          "type": "array",
          "items": {
            "type": "array",
            "items": {
              "type": "number"
            }
          }
        },
        "goal2time": {
          "type": "object",
          "description": "Maps goal id (foreign key into task -> goals) to a time within the trajectory (should be included in the time property of trajectory)",
          "patternProperties": {
            "^.*$": {"type": "number"}
          }
        }
      }
    }
  }
}
